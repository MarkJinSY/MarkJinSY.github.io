<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【持续更新中】Java面试总结(Java基础)</title>
    <url>/2022/01/12/Java%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="记录一下Java面试的必备八股文"><a href="#记录一下Java面试的必备八股文" class="headerlink" title="记录一下Java面试的必备八股文"></a>记录一下Java面试的必备八股文</h1><h1 id="整体知识点"><a href="#整体知识点" class="headerlink" title="整体知识点"></a>整体知识点</h1><blockquote>
<ul>
<li><a href="(https://markjinsy.github.io/2022/01/12/Java%E5%9F%BA%E7%A1%80/)" title="Markdown">Java基础</a></li>
<li>Java EE(Spring)</li>
<li>数据库</li>
<li>计算机网络</li>
<li>操作系统</li>
<li>算法与数据结构</li>
<li>Nginx</li>
<li>Redis</li>
<li>设计模式</li>
<li>JVM</li>
<li>多线程&amp;并发</li>
</ul>
</blockquote>
<h1 id="Java基础篇"><a href="#Java基础篇" class="headerlink" title="Java基础篇"></a>Java基础篇</h1><h2 id="特性与基本语法"><a href="#特性与基本语法" class="headerlink" title="特性与基本语法"></a>特性与基本语法</h2><h3 id="1、Java基本数据类型"><a href="#1、Java基本数据类型" class="headerlink" title="1、Java基本数据类型"></a>1、Java基本数据类型</h3><table>
<thead>
<tr>
<th>基本类型</th>
<th>大小(字节)</th>
<th>默认值</th>
<th>封装类</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>1</td>
<td>(byte)0</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>2</td>
<td>(short)0</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>4</td>
<td>0</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>8</td>
<td>0L</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>4</td>
<td>0.0f</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>8</td>
<td>0.0d</td>
<td>Double</td>
</tr>
<tr>
<td>boolean</td>
<td>-</td>
<td>false</td>
<td>Boolean</td>
</tr>
<tr>
<td>char</td>
<td>2</td>
<td>\u0000(null)</td>
<td>Character</td>
</tr>
</tbody></table>
<ul>
<li>int为基础数据类型，Integer为引用类型，因而Integer的默认值为null，在使用前需先为其指定一个对象，否则会报错；</li>
<li>基本数据类型在声名时系统会自动为其分配空间，而引用类型声明时只是分配了引用空间，必须实例化开辟数据空间后才可以为其赋值。将一个数组赋值给另一个数组时只是复制了一个引用，对一个数组的操作，在另一个数组中也可见。</li>
</ul>
<h3 id="2、装箱和拆箱"><a href="#2、装箱和拆箱" class="headerlink" title="2、装箱和拆箱"></a>2、装箱和拆箱</h3><p><strong>装箱即基本数据类型转换成包装器类型(int -&gt; Integer)；调用方法：Integer = valueOf(int)</strong></p>
<p><strong>拆箱即包装器类型转基本数据类型，(Integer -&gt; int); 调用方法：int = intValue</strong></p>
<p>Java SE5之前，生成一个值为10的Integer对象：<br><code>Integer i = new Integer(10);</code><br>Java SE5之后提供了自动装箱的特性，生成一个数值为10的Integer对象：<br><code>Integer i = 10;</code></p>
<ul>
<li>例题1： 以下代码的输出是？<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">pulic class <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Integer i1 = <span class="number">100</span>;</span><br><span class="line">    Integer i2 = <span class="number">100</span>;</span><br><span class="line">    Integer i3 = <span class="number">200</span>;</span><br><span class="line">    Integer i4 = <span class="number">200</span>;</span><br><span class="line">    System.out.println(i1 == i2);</span><br><span class="line">    System.out.println(i3 == i4);</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
输出结果：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure>
这样的结果表明i1和i2指向的是同一个对象，而i3和i4则不是，从Integer的valueOf的源码中可以解释这一情况：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (i &gt;= -<span class="number">128</span> &amp;&amp; i &lt;= IntegerCache.high) &#123;</span><br><span class="line">    <span class="keyword">return</span> IntegerCache.cache[i + <span class="number">128</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
IntegerCache的实现：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> high;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//high value may bu configured by property</span></span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">if</span>(integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//Use Long decode here to avoid invoking methods that</span></span><br><span class="line">      <span class="comment">//require Integer&#x27;s autoboxing cache to be initialized</span></span><br><span class="line">      <span class="keyword">int</span> i = Long.decode(integerCacheHighPropValue).intValue();</span><br><span class="line">      i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">      <span class="comment">//Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">      h = Math.min(i, Integer.MAX_VALUE - -low);</span><br><span class="line">    &#125;</span><br><span class="line">    high = h;</span><br><span class="line">    cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> j = low;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++) &#123;</span><br><span class="line">      cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
从以上两段代码中可以看出，当调用Integer的ValueOf方法时，如果生成的数值在[-128,127]之间则直接调用IntegerCache.cache中已存在的对象的引用；否则就再new一个新的对象。</li>
</ul>
<p>由此可知，i1和i2的数值为100，因此会直接从cache中取已存在的对象，所以i1和i2指向同一个对象，i3和i4是两个不同的对象。</p>
<ul>
<li>例题2：以下代码的输出是？<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">pulic class <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Double i1 = <span class="number">100.0</span>;</span><br><span class="line">    Double i2 = <span class="number">100.0</span>;</span><br><span class="line">    Double i3 = <span class="number">200.0</span>;</span><br><span class="line">    Double i4 = <span class="number">200.0</span>;</span><br><span class="line">    System.out.println(i1 == i2);</span><br><span class="line">    System.out.println(i3 == i4);</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
输出结果：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">false</span><br><span class="line">false</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>原因：</strong>某个范围内整形的个数是有限的，而浮点数不是。</p>
<h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><p>1312321</p>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>1231</p>
<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>131231</p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>1321</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/01/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>demo</title>
    <url>/2022/01/10/demo/</url>
    <content><![CDATA[<!-- <p align="center"> -->
<p> <img src="https://img.shields.io/github/license/Chocolate1999/hexo-blog-lionkk.svg" alt="License"><a href="https://github.com/Chocolate1999/hexo-blog-lionkk/network"> <img src="https://img.shields.io/github/forks/Chocolate1999/hexo-blog-lionkk.svg" alt="GitHub forks"></a> <a href="https://github.com/Chocolate1999/hexo-blog-lionkk/stargazers"> <img src="https://img.shields.io/github/stars/Chocolate1999/hexo-blog-lionkk.svg" alt="GitHub stars"></a><br><a href="https://github.com/Chocolate1999/hexo-blog-lionkk/releases"><img alt="Version" src="https://img.shields.io/badge/release-2.0.0-blue"></a><a href="https://yangchaoyi.vip/"><img alt="Author" src="https://img.shields.io/badge/author-yangchaoyi-blur"></a><br><a href="https://hexo.io"><img alt="Hexo" src="https://img.shields.io/badge/hexo-4.0+-0e83c"></a><br><a href="https://nodejs.org/"><img alt="node.js" src="https://img.shields.io/badge/node.js-8.0+-blur"></a></p>
<!-- </p> -->


<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><ul>
<li>测试一下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>关于hexo</title>
    <url>/2022/01/12/hexo/</url>
    <content><![CDATA[<h2 id="简单记录一下怎么使用hexo"><a href="#简单记录一下怎么使用hexo" class="headerlink" title="简单记录一下怎么使用hexo"></a>简单记录一下怎么使用hexo</h2><hr>
<h4 id="hexo命令"><a href="#hexo命令" class="headerlink" title="hexo命令"></a>hexo命令</h4><ul>
<li><code>hexo server</code> <ul>
<li>#Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</li>
</ul>
</li>
<li><code>hexo server -s</code> <ul>
<li>#以静态模式启动</li>
</ul>
</li>
<li><code>hexo server -p 5000</code> <ul>
<li>#更改访问端口 (默认端口为4000，’ctrl + c’关闭server)</li>
</ul>
</li>
<li><code>hexo server -i IP地址</code><ul>
<li> #自定义 IP</li>
</ul>
</li>
<li><code>hexo clean</code> <ul>
<li>#清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹</li>
</ul>
</li>
<li><code>hexo g</code> 即 <code>hexo generate</code><ul>
<li>#生成静态网页 (执行 $ hexo g后会在站点根目录下生成public文件夹, hexo会将”/blog/source/“ 下面的.md后缀的文件编译为.html后缀的文件,存放在”/blog/public/ “ 路径下)</li>
</ul>
</li>
<li><code>hexo d</code> 即 <code>hexo deploy</code> <ul>
<li>#将本地数据部署到远端服务器(如github)</li>
</ul>
</li>
<li><code>hexo init 文件夹名称</code><ul>
<li> #初始化XX文件夹名称</li>
</ul>
</li>
<li><code>npm update hexo -g</code><ul>
<li>#升级</li>
</ul>
</li>
<li><code>npm install hexo -g</code><ul>
<li>#安装</li>
</ul>
</li>
<li><code>hexo -v</code> <ul>
<li>#查看hexo版本号</li>
</ul>
</li>
</ul>
<hr>
<h4 id="关于写博客"><a href="#关于写博客" class="headerlink" title="关于写博客"></a>关于写博客</h4><ul>
<li>发布博客 <code>hexo new blogname</code></li>
<li>添加页面 <code>hexo new page pagename</code></li>
<li>添加标签、分类、开启评论、使用博客封面<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: demo</span><br><span class="line">date: 2022-01-10 10:11:28</span><br><span class="line">tags:</span><br><span class="line">  - [test]</span><br><span class="line">categories: </span><br><span class="line">  - [test]</span><br><span class="line">cover: https://jack-img.oss-cn-hangzhou.aliyuncs.com/img/20210818111502.jpg</span><br><span class="line">comments: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li>
<li>如何插入图片<ul>
<li>打开github/pictures<br>进入issue<br>将图片复制到Write中，直接将链接贴至自己的blog中即可</li>
</ul>
</li>
</ul>
<hr>
<h4 id="一些重要的配置"><a href="#一些重要的配置" class="headerlink" title="一些重要的配置"></a>一些重要的配置</h4><blockquote>
<p><a href="https://blog.csdn.net/u012208219/article/details/106883001" title="Markdown">魔改hexo butterfly主题请参考</a>。</p>
</blockquote>
<ul>
<li>导航栏配置 <code>menu</code></li>
<li>图片配置 <code>Image</code></li>
<li>代码相关 <code>Code Blocks</code> </li>
<li>搜索 <code>search</code></li>
<li>分享功能 <code>Share System</code></li>
<li>评论系统 <code>Comments System</code></li>
<li>背景特效 <code>Background effects</code></li>
<li>侧边栏 <code>aside</code></li>
<li>右下角按钮 <code>Bottom right button</code></li>
<li>引入css、js<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;https://XXX.css&quot;&gt;</span><br><span class="line">  bottom:</span><br><span class="line">    - &lt;script src=&quot;https://XXX.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法</title>
    <url>/2022/01/12/markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><blockquote>
<h4 id="Markdown是什么？"><a href="#Markdown是什么？" class="headerlink" title="Markdown是什么？"></a>Markdown<em>是什么</em>？</h4><h4 id="谁创造了它？"><a href="#谁创造了它？" class="headerlink" title="谁创造了它？"></a><em>谁</em>创造了它？</h4><h4 id="为什么要使用它？"><a href="#为什么要使用它？" class="headerlink" title="为什么要使用它？"></a><em>为什么</em>要使用它？</h4><h4 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a><em>怎么</em>使用？</h4><h4 id="谁在用？"><a href="#谁在用？" class="headerlink" title="谁在用？"></a><em>谁</em>在用？</h4><h4 id="尝试一下"><a href="#尝试一下" class="headerlink" title="尝试一下"></a>尝试一下</h4></blockquote>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-Markdown是什么？"><a href="#1-Markdown是什么？" class="headerlink" title="1. Markdown是什么？"></a>1. Markdown<em>是什么</em>？</h3><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    </p>
<h3 id="2-谁创造了它？"><a href="#2-谁创造了它？" class="headerlink" title="2. 谁创造了它？"></a>2. <em>谁</em>创造了它？</h3><p>它由<a href="http://www.aaronsw.com/"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。    </p>
<p>他有着足以让你跪拜的人生经历：    </p>
<ul>
<li><strong>14岁</strong>参与RSS 1.0规格标准的制订。     </li>
<li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。   </li>
<li><strong>2005</strong>年创建<a href="http://infogami.org/">Infogami</a>，之后与<a href="http://www.reddit.com/">Reddit</a>合并成为其合伙人。   </li>
<li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   </li>
<li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     </li>
<li><strong>2013</strong>年1月自杀身亡。    </li>
</ul>
<p><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt="Aaron Swartz"></p>
<p>天才都有早逝的归途。</p>
<h3 id="3-为什么要使用它？"><a href="#3-为什么要使用它？" class="headerlink" title="3. 为什么要使用它？"></a>3. <em>为什么</em>要使用它？</h3><ul>
<li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li>
<li>兼容HTML，可以转换为HTML格式发布。</li>
<li>跨平台使用。</li>
<li>越来越多的网站支持Markdown。</li>
<li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li>
<li>摆脱Word（我不是认真的）。</li>
</ul>
<h3 id="4-怎么使用？"><a href="#4-怎么使用？" class="headerlink" title="4. 怎么使用？"></a>4. <em>怎么</em>使用？</h3><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p>
<p>Markdown语法主要分为如下几大部分：<br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，**反斜杠 <code>\</code><strong>，</strong>符号’`’**。</p>
<h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a>4.1 标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p>
<blockquote>
<p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p>
</blockquote>
<p>效果：</p>
<blockquote>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题   "></a>一级标题   </h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote>
<p>2）使用<code>#</code>，可表示1-6级标题。</p>
<blockquote>
<p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p>
</blockquote>
<p>效果：</p>
<blockquote>
<h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote>
<h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a>4.2 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p>
<h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a>4.3 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p>
<blockquote>
<p>&gt; 区块引用<br>&gt;&gt; 嵌套引用  </p>
</blockquote>
<p>效果：</p>
<blockquote>
<p>区块引用  </p>
<blockquote>
<p>嵌套引用</p>
</blockquote>
</blockquote>
<h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a>4.4 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p>
<p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}    </p>
<p>代码区块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;Hello, Markdown.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>:需要和普通段落之间存在空行。</p>
<h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a>4.5 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p>
<blockquote>
<p>*斜体*，_斜体_<br>**粗体**，__粗体__</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p>
</blockquote>
<h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a>4.6 列表</h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p>
<blockquote>
<p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p>
</blockquote>
<p><strong>注意</strong>：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p>
<p>效果：</p>
<blockquote>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
</blockquote>
<p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p>
<blockquote>
<p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p>
</blockquote>
<p>效果：</p>
<blockquote>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
</blockquote>
<h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a>4.7 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p>
<h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a>4.8 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p>
<blockquote>
<p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库</a>。</p>
</blockquote>
<p><strong>参考式</strong>：</p>
<blockquote>
<p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”    </p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库1</a><br><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库2</a></p>
</blockquote>
<p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p>
<h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a>4.9 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p>
<h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a>4.10 反斜杠<code>\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p>
<h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a>4.11 符号’`’</h4><p>起到标记作用。如：</p>
<blockquote>
<p>`ctrl+a`</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><code>ctrl+a</code>    </p>
</blockquote>
<h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a>5. <em>谁</em>在用？</h4><p>Markdown的使用者：</p>
<ul>
<li>GitHub</li>
<li>简书</li>
<li>Stack Overflow</li>
<li>Apollo</li>
<li>Moodle</li>
<li>Reddit</li>
<li>等等</li>
</ul>
<h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a>6. 尝试一下</h4><ul>
<li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li>
<li><strong>在线</strong>的dillinger.io评价也不错   </li>
<li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。    </li>
<li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li>
<li><strong>Linux</strong>下的ReText不错。    </li>
</ul>
<p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p>
<hr>
<p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p>
<hr>
<p>以上基本是所有traditonal markdown的语法。</p>
<h3 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h3><p>列表的使用(非traditonal markdown)：</p>
<p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有<code>:</code>则表示居中，若不加<code>:</code>则默认左对齐。</p>
<table>
<thead>
<tr>
<th align="center">代码库</th>
<th>链接</th>
</tr>
</thead>
<tbody><tr>
<td align="center">MarkDown</td>
<td><a href="https://github.com/younghz/Markdown" title="Markdown">https://github.com/younghz/Markdown</a></td>
</tr>
<tr>
<td align="center">MarkDownCopy</td>
<td><a href="https://github.com/younghz/Markdown" title="Markdown">https://github.com/younghz/Markdown</a></td>
</tr>
</tbody></table>
<p>关于其它扩展语法可参见具体工具的使用说明。</p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>【React Hooks系列】之useState (搬运)</title>
    <url>/2022/01/13/useState/</url>
    <content><![CDATA[<h3 id="简单的示例"><a href="#简单的示例" class="headerlink" title="简单的示例"></a>简单的示例</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义了一个button，当点击时，n+1并更新视图</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> initValue = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> [n, setN] = useState(initValue);</span><br><span class="line">  <span class="keyword">const</span> add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setN(n + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;add&#125;</span>&gt;</span>+1,此时n:&#123;n&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://user-images.githubusercontent.com/58502210/149647839-eb6f3d12-28f4-4517-8c99-4d8dcfa49283.png" alt="1"></p>
<h3 id="useState用法"><a href="#useState用法" class="headerlink" title="useState用法"></a>useState用法</h3><blockquote>
<p>const [state, setState] = useState(initValue)</p>
</blockquote>
<p>useState接收一个初始值，这个初始值可以是对象，也可以是简单数据类型。<br>在初始渲染期间，返回的状态 (state) 与传入的第一个参数 (initValue) 值相同。<br>返回的setState是一个函数，它接收一个新的 state 值并将组件的一次重新渲染加入队列。</p>
<h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>只能React函数组件中使用Hooks。<br>useState不能在内部的循环、条件判断、嵌套的方法中使用。</p>
<h3 id="setState异步更新"><a href="#setState异步更新" class="headerlink" title="setState异步更新"></a>setState异步更新</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> initValue = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> [n, setN] = useState(initValue);</span><br><span class="line">  <span class="keyword">const</span> add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setN(n + <span class="number">1</span>);</span><br><span class="line"> +  <span class="built_in">console</span>.log(n)</span><br><span class="line"> +  setN(n+<span class="number">1</span>)</span><br><span class="line"> +  <span class="built_in">console</span>.log(n)</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;add&#125;</span>&gt;</span>+1,此时n:&#123;n&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点击之后视图上只加了1，但是log了两次，说明setN是异步的，不能立即更新，而是把所有同步代码执行完之后，再执行视图更新，而这时候入参的n还是旧的值，并没有被更新。</p>
<p><img src="https://user-images.githubusercontent.com/58502210/149648480-85a065c0-19b5-4615-b4ff-258f0c370beb.png" alt="2"></p>
<p>注：这时候传入的 n 由于闭包的原因，所以拿到的是旧的值。比如刚开始 n 是0，调用两次 setN 后相当于设置了两次1。<br>在React 事件中，setState 确实是异步的，为了提高性能（每次 setState 都会重新执行 hooks 函数），所以相同的setState会进行合并。</p>
<h3 id="setN函数"><a href="#setN函数" class="headerlink" title="setN函数"></a>setN函数</h3><p>setN是可以传递函数的，它的参数是旧的n，返回新的value</p>
<p>上面的代码如果修改成以下内容就有效</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> initValue = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> [n, setN] = useState(initValue);</span><br><span class="line">  <span class="keyword">const</span> add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  +   setN(<span class="function">(<span class="params">oldN</span>) =&gt;</span> &#123;</span><br><span class="line">  +   	<span class="built_in">console</span>.log(oldN);</span><br><span class="line">  +   	<span class="keyword">return</span> oldN + <span class="number">1</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  +  setN(<span class="function">(<span class="params">oldN</span>) =&gt;</span> &#123;</span><br><span class="line">  + 	<span class="built_in">console</span>.log(oldN);</span><br><span class="line">  +  	<span class="keyword">return</span> oldN + <span class="number">1</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;add&#125;</span>&gt;</span>+1,此时n:&#123;n&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="state可以是对象"><a href="#state可以是对象" class="headerlink" title="state可以是对象"></a>state可以是对象</h3><p>当 useState 中的 state 为对象时，调用相应的 setState 有一些要注意的地方，useState 不会自动合并更新对象，你可以用函数式的 setState 结合展开运算符来达到合并更新对象的效果。</p>
<h3 id="错误示例"><a href="#错误示例" class="headerlink" title="错误示例"></a>错误示例</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> initValue = &#123; <span class="attr">n</span>: <span class="number">0</span>, <span class="attr">m</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = useState(initValue);</span><br><span class="line">  <span class="keyword">const</span> addN = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setState(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">n</span>: state.n + <span class="number">1</span> &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> addM = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setState(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">m</span>: state.m + <span class="number">1</span> &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addN&#125;</span>&gt;</span>+1,此时n:&#123;state.n&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addM&#125;</span>&gt;</span>+1,此时m:&#123;state.m&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的state不会自动帮我们合并，所以需要我们使用…运算符来帮助我们手动合并。</p>
<h3 id="正确示例"><a href="#正确示例" class="headerlink" title="正确示例"></a>正确示例</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> initValue = &#123; <span class="attr">n</span>: <span class="number">0</span>, <span class="attr">m</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = useState(initValue);</span><br><span class="line">  <span class="keyword">const</span> addN = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setState(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">   +  <span class="keyword">return</span> &#123; ...state, <span class="attr">n</span>: state.n + <span class="number">1</span> &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> addM = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setState(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">   +  <span class="keyword">return</span> &#123; ...state, <span class="attr">m</span>: state.m + <span class="number">1</span> &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addN&#125;</span>&gt;</span>+1,此时n:&#123;state.n&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;addM&#125;</span>&gt;</span>+1,此时m:&#123;state.m&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>useState返回一对数组，第一个值是初始值，第二个值state的setter方法</li>
<li>如果state是对象的话，需要我们手动合并</li>
<li>setState时，可以传函数也可以传值，如果依赖于旧的state，最好使用函数的形式</li>
</ul>
<h3 id="转载自"><a href="#转载自" class="headerlink" title="转载自"></a>转载自</h3><blockquote>
<p><a href="https://juejin.cn/post/6888668676711841800">https://juejin.cn/post/6888668676711841800</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2022/01/17/Linux/</url>
    <content><![CDATA[<h1 id="Linux命令大全"><a href="#Linux命令大全" class="headerlink" title="Linux命令大全"></a>Linux命令大全</h1><h2 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h2><ul>
<li>远程拷贝文件到本地<ul>
<li><code>scp jsy@10.18.254.169:/home/XXX/XXX/filename ./</code></li>
</ul>
</li>
<li>远程拷贝目录到本地<ul>
<li><code>scp -r jsy@10.18.254.169:/home/XXX/dname ./</code></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【持续更新中】Java面试总结(多线程&amp;并发)</title>
    <url>/2022/01/18/%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%B9%B6%E5%8F%91/</url>
    <content><![CDATA[<h1 id="记录一下Java面试的必备八股文"><a href="#记录一下Java面试的必备八股文" class="headerlink" title="记录一下Java面试的必备八股文"></a>记录一下Java面试的必备八股文</h1><h1 id="整体知识点"><a href="#整体知识点" class="headerlink" title="整体知识点"></a>整体知识点</h1><blockquote>
<ul>
<li><a href="(https://markjinsy.github.io/2022/01/12/Java%E5%9F%BA%E7%A1%80/)" title="Markdown">Java基础</a></li>
<li>Java EE(Spring)</li>
<li>数据库</li>
<li>计算机网络</li>
<li>操作系统</li>
<li>算法与数据结构</li>
<li>Nginx</li>
<li>Redis</li>
<li>设计模式</li>
<li>JVM</li>
<li>多线程&amp;并发</li>
</ul>
</blockquote>
<h1 id="多线程-amp-并发篇"><a href="#多线程-amp-并发篇" class="headerlink" title="多线程&amp;并发篇"></a>多线程&amp;并发篇</h1><h3 id="进程、线程、程序的基本概念，以及他们之间的联系"><a href="#进程、线程、程序的基本概念，以及他们之间的联系" class="headerlink" title="进程、线程、程序的基本概念，以及他们之间的联系"></a>进程、线程、程序的基本概念，以及他们之间的联系</h3><ul>
<li><strong>线程</strong>与进程相似，但线程是比进程更小的一个执行单位。一个进程在其执行过程中可以产生多个线程。与进程不同的是同类的多个线程共享一块内存空间和一组系统资源，所以系统在产生一个线程或是在各个线程之间切换工作时，负担比进程小得多，正因如此，线程也被成为轻量级进程。</li>
<li><strong>程序</strong>是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，也就是程序是静态的代码。</li>
<li><strong>进程</strong>是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建、运行到消亡的过程。简单来说，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令的执行着，同时，每个进程还占用某些系统资源如CPU时间，内存空间，文件，输入输出设备的使用权等等。换句话说，当程序在执行时，将会被操作系统载入内存中。线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会互相影响。从另一个角度来说，进程处于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎相同时执行以上一个的程序段。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
</search>
